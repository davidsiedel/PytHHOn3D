from core.face import Face
from core.cell import Cell
from bases.basis import Basis
from bases.monomial import ScaledMonomial


class Element:
    """
    ====================================================================================================================
    Class :
    ====================================================================================================================
    
    ====================================================================================================================
    Parameters :
    ====================================================================================================================
    
    ====================================================================================================================
    Attributes :
    ====================================================================================================================
    
    """

    def __init__(self, cell: Cell, faces: List[Face], cell_basis: Basis, face_basis: Basis):
        for face in faces:
            # ----------------------------------------------------------------------------------------------------------
            # Getting the face orientation with respect to the cell
            # ----------------------------------------------------------------------------------------------------------
            vector_to_face = self.get_vector_to_face(cell, face)
            if vector_to_face[-1] > 0:
                n = -1
                passmat = self.get_swaped_face_reference_frame_transformation_matrix(cell, face)
            else:
                n = 1
                passmat = face.reference_frame_transformation_matrix

    def get_vector_to_face(self, cell: Cell, face: Face) -> Mat:
        """
        ================================================================================================================
        Description :
        ================================================================================================================
        
        ================================================================================================================
        Parameters :
        ================================================================================================================
        
        ================================================================================================================
        Exemple :
        ================================================================================================================
        
        """
        p = face.reference_frame_transformation_matrix
        vector_to_face = (p @ (cell.centroid - face.centroid).T).T
        return vector_to_face

    def get_swaped_face_reference_frame_transformation_matrix(self, cell: Cell, face: Face) -> Mat:
        """
        ================================================================================================================
        Description :
        ================================================================================================================
        
        ================================================================================================================
        Parameters :
        ================================================================================================================
        
        ================================================================================================================
        Exemple :
        ================================================================================================================
        
        """
        p = face.reference_frame_transformation_matrix
        problem_dimension = p.shape[1]
        # --------------------------------------------------------------------------------------------------------------
        # 2d faces in 3d cells
        # --------------------------------------------------------------------------------------------------------------
        if problem_dimension == 3:
            swaped_reference_frame_transformation_matrix = np.array([p[1], p[0], -p[2]])
        # --------------------------------------------------------------------------------------------------------------
        # 1d faces in 2d cells
        # --------------------------------------------------------------------------------------------------------------
        if problem_dimension == 2:
            swaped_reference_frame_transformation_matrix = np.array([p[0], -p[1]])
        # --------------------------------------------------------------------------------------------------------------
        # 0d faces in 1d cells
        # --------------------------------------------------------------------------------------------------------------
        if problem_dimension == 1:
            swaped_reference_frame_transformation_matrix = np.array([-p[0]])
        return swaped_reference_frame_transformation_matrix
